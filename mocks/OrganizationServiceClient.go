// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "onepass.app/facility/hts/common"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	organizer "onepass.app/facility/hts/organizer"
)

// OrganizationServiceClient is an autogenerated mock type for the OrganizationServiceClient type
type OrganizationServiceClient struct {
	mock.Mock
}

// AddTag provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) AddTag(ctx context.Context, in *organizer.UpdateTagReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateTagReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateTagReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUsersToOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) AddUsersToOrganization(ctx context.Context, in *organizer.UpdateUsersInOrganizationReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateUsersInOrganizationReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateUsersInOrganizationReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) CreateEvent(ctx context.Context, in *organizer.CreateEventReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.CreateEventReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.CreateEventReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) CreateOrganization(ctx context.Context, in *organizer.CreateOrganizationReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.CreateOrganizationReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.CreateOrganizationReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) DeleteEvent(ctx context.Context, in *organizer.DeleteEventReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.DeleteEventReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.DeleteEventReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) DeleteOrganization(ctx context.Context, in *organizer.DeleteOrganizationReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.DeleteOrganizationReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.DeleteOrganizationReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasEvent provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) HasEvent(ctx context.Context, in *organizer.HasEventReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.HasEventReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.HasEventReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadEvent provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ReadEvent(ctx context.Context, in *organizer.UserReq, opts ...grpc.CallOption) (*organizer.ReadEventRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organizer.ReadEventRes
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UserReq, ...grpc.CallOption) *organizer.ReadEventRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizer.ReadEventRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UserReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ReadOrganization(ctx context.Context, in *organizer.UserReq, opts ...grpc.CallOption) (*organizer.ReadOrganizationRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organizer.ReadOrganizationRes
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UserReq, ...grpc.CallOption) *organizer.ReadOrganizationRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizer.ReadOrganizationRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UserReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadTag provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ReadTag(ctx context.Context, in *organizer.UserReq, opts ...grpc.CallOption) (*organizer.ReadTagRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *organizer.ReadTagRes
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UserReq, ...grpc.CallOption) *organizer.ReadTagRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizer.ReadTagRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UserReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTag provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) RemoveTag(ctx context.Context, in *organizer.UpdateTagReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateTagReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateTagReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUsersFromOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) RemoveUsersFromOrganization(ctx context.Context, in *organizer.UpdateUsersInOrganizationReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateUsersInOrganizationReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateUsersInOrganizationReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventDuration provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) UpdateEventDuration(ctx context.Context, in *organizer.UpdateEventDurationReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateEventDurationReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateEventDurationReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventFacility provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) UpdateEventFacility(ctx context.Context, in *organizer.UpdateEventFacilityReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateEventFacilityReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateEventFacilityReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventInfo provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) UpdateEventInfo(ctx context.Context, in *organizer.UpdateEventInfoReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateEventInfoReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateEventInfoReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) UpdateOrganization(ctx context.Context, in *organizer.UpdateOrganizationReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateOrganizationReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateOrganizationReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegistrationRequest provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) UpdateRegistrationRequest(ctx context.Context, in *organizer.UpdateRegistrationRequestReq, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *organizer.UpdateRegistrationRequestReq, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *organizer.UpdateRegistrationRequestReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
