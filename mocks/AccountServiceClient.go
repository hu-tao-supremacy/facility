// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	account "onepass.app/facility/hts/account"
	common "onepass.app/facility/hts/common"

	context "context"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AccountServiceClient is an autogenerated mock type for the AccountServiceClient type
type AccountServiceClient struct {
	mock.Mock
}

// GenerateJWT provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GenerateJWT(ctx context.Context, in *account.GenerateJWTRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *account.GenerateJWTRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *account.GenerateJWTRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermission provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) HasPermission(ctx context.Context, in *account.HasPermissionRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *account.HasPermissionRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *account.HasPermissionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateJWT provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) InvalidateJWT(ctx context.Context, in *account.InvalidateJWTRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *account.InvalidateJWTRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *account.InvalidateJWTRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthenticated provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) IsAuthenticated(ctx context.Context, in *account.IsAuthenticatedRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *account.IsAuthenticatedRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *account.IsAuthenticatedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountInfo provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) UpdateAccountInfo(ctx context.Context, in *account.UpdateAccountInfoRequest, opts ...grpc.CallOption) (*account.UpdateAccountInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *account.UpdateAccountInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *account.UpdateAccountInfoRequest, ...grpc.CallOption) *account.UpdateAccountInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.UpdateAccountInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *account.UpdateAccountInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
