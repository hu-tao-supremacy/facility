// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "onepass.app/facility/hts/common"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	participant "onepass.app/facility/hts/participant"
)

// ParticipantServiceClient is an autogenerated mock type for the ParticipantServiceClient type
type ParticipantServiceClient struct {
	mock.Mock
}

// CancelEvent provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) CancelEvent(ctx context.Context, in *participant.UserWithEventRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFeedback provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) CreateFeedback(ctx context.Context, in *participant.CreateFeedbackRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *participant.CreateFeedbackRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.CreateFeedbackRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateQR provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) GenerateQR(ctx context.Context, in *common.UserEvent, opts ...grpc.CallOption) (*participant.GenerateQRResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.GenerateQRResponse
	if rf, ok := ret.Get(0).(func(context.Context, *common.UserEvent, ...grpc.CallOption) *participant.GenerateQRResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.GenerateQRResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.UserEvent, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEvents provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) GetAllEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*participant.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.EventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *participant.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.EventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) GetEvent(ctx context.Context, in *participant.GetEventRequest, opts ...grpc.CallOption) (*common.Event, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Event
	if rf, ok := ret.Get(0).(func(context.Context, *participant.GetEventRequest, ...grpc.CallOption) *common.Event); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.GetEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeedbackFromEvent provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) GetFeedbackFromEvent(ctx context.Context, in *common.Event, opts ...grpc.CallOption) (*participant.GetFeedbackForEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.GetFeedbackForEventResponse
	if rf, ok := ret.Get(0).(func(context.Context, *common.Event, ...grpc.CallOption) *participant.GetFeedbackForEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.GetFeedbackForEventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.Event, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuggestedEvents provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) GetSuggestedEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*participant.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.EventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *participant.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.EventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFeedbackForEvent provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) GetUserFeedbackForEvent(ctx context.Context, in *participant.UserWithEventRequest, opts ...grpc.CallOption) (*participant.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.EventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) *participant.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.EventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasSubmitFeedback provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) HasSubmitFeedback(ctx context.Context, in *participant.UserWithEventRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEventAvailable provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) IsEventAvailable(ctx context.Context, in *common.Event, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *common.Event, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.Event, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinEvent provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) JoinEvent(ctx context.Context, in *participant.UserWithEventRequest, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.UserWithEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFeedback provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) RemoveFeedback(ctx context.Context, in *common.EventFeedback, opts ...grpc.CallOption) (*common.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *common.Result
	if rf, ok := ret.Get(0).(func(context.Context, *common.EventFeedback, ...grpc.CallOption) *common.Result); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.EventFeedback, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchEventsByName provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) SearchEventsByName(ctx context.Context, in *participant.StringInputRequest, opts ...grpc.CallOption) (*participant.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.EventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *participant.StringInputRequest, ...grpc.CallOption) *participant.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.EventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.StringInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchEventsByTag provides a mock function with given fields: ctx, in, opts
func (_m *ParticipantServiceClient) SearchEventsByTag(ctx context.Context, in *participant.StringInputRequest, opts ...grpc.CallOption) (*participant.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *participant.EventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *participant.StringInputRequest, ...grpc.CallOption) *participant.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*participant.EventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *participant.StringInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
